MORPHEUS_CFG_DEPENDS(COMPILER_ID NONE)

SET(MORPHEUS_CXX_COMPILER ${CMAKE_CXX_COMPILER})
SET(MORPHEUS_CXX_COMPILER_ID ${CMAKE_CXX_COMPILER_ID})
SET(MORPHEUS_CXX_COMPILER_VERSION ${CMAKE_CXX_COMPILER_VERSION})

MACRO(morpheus_internal_have_compiler_nvcc)
  # Check if the compiler is nvcc (which really means nvcc_wrapper).
  EXECUTE_PROCESS(COMMAND ${ARGN} --version
                  OUTPUT_VARIABLE INTERNAL_COMPILER_VERSION
                  OUTPUT_STRIP_TRAILING_WHITESPACE)
  STRING(REPLACE "\n" " - " INTERNAL_COMPILER_VERSION_ONE_LINE ${INTERNAL_COMPILER_VERSION} )
  STRING(FIND ${INTERNAL_COMPILER_VERSION_ONE_LINE} "nvcc" INTERNAL_COMPILER_VERSION_CONTAINS_NVCC)
  STRING(REGEX REPLACE "^ +" "" INTERNAL_HAVE_COMPILER_NVCC "${INTERNAL_HAVE_COMPILER_NVCC}")
  IF(${INTERNAL_COMPILER_VERSION_CONTAINS_NVCC} GREATER -1)
    SET(INTERNAL_HAVE_COMPILER_NVCC true)
  ELSE()
    SET(INTERNAL_HAVE_COMPILER_NVCC false)
  ENDIF()
ENDMACRO()

# IF(Morpheus_ENABLE_CUDA)
#   # find kokkos_launch_compiler
#   FIND_PROGRAM(Kokkos_COMPILE_LAUNCHER
#       NAMES           kokkos_launch_compiler
#       HINTS           ${Kokkos_ROOT}
#       PATHS           ${Kokkos_ROOT}
#       PATH_SUFFIXES   bin)

#   FIND_PROGRAM(Kokkos_NVCC_WRAPPER
#       NAMES           nvcc_wrapper
#       HINTS           ${Kokkos_ROOT}
#       PATHS           ${Kokkos_ROOT}
#       PATH_SUFFIXES   bin)

#   # check if compiler was set to nvcc_wrapper
#   morpheus_internal_have_compiler_nvcc(${CMAKE_CXX_COMPILER})
#   # if launcher was found and nvcc_wrapper was not specified as
#   # compiler, set to use launcher. Will ensure CMAKE_CXX_COMPILER
#   # is replaced by nvcc_wrapper
#   IF(Kokkos_COMPILE_LAUNCHER AND NOT INTERNAL_HAVE_COMPILER_NVCC AND NOT Morpheus_CXX_COMPILER_ID STREQUAL Clang)
#     # the first argument to launcher is always the C++ compiler defined by cmake
#     # if the second argument matches the C++ compiler, it forwards the rest of the
#     # args to nvcc_wrapper
#     morpheus_internal_have_compiler_nvcc(
#       ${Kokkos_COMPILE_LAUNCHER} ${Kokkos_NVCC_WRAPPER} ${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER} -DKOKKOS_DEPENDENCE)
#     SET(INTERNAL_USE_COMPILER_LAUNCHER true)
#   ENDIF()
# ENDIF()

# IF(INTERNAL_HAVE_COMPILER_NVCC)
#   # Save the host compiler id before overwriting it.
#   SET(MORPHEUS_CXX_HOST_COMPILER_ID ${MORPHEUS_CXX_COMPILER_ID})

#   # SET the compiler id to nvcc.  We use the value used by CMake 3.8.
#   SET(MORPHEUS_CXX_COMPILER_ID NVIDIA CACHE STRING INTERNAL FORCE)

#   STRING(REGEX MATCH "V[0-9]+\\.[0-9]+\\.[0-9]+"
#          TEMP_CXX_COMPILER_VERSION ${INTERNAL_COMPILER_VERSION_ONE_LINE})
#   STRING(SUBSTRING ${TEMP_CXX_COMPILER_VERSION} 1 -1 TEMP_CXX_COMPILER_VERSION)
#   SET(MORPHEUS_CXX_COMPILER_VERSION ${TEMP_CXX_COMPILER_VERSION} CACHE STRING INTERNAL FORCE)
#   MESSAGE(STATUS "Compiler Version: ${MORPHEUS_CXX_COMPILER_VERSION}")
#   IF(INTERNAL_USE_COMPILER_LAUNCHER)
#     MESSAGE(STATUS "kokkos_launch_compiler (${Kokkos_COMPILE_LAUNCHER}) is enabled...")
#     # FIXME: See KokkosConfigCommon.cmake.in
#     morpheus_compilation(GLOBAL)
#   ENDIF()
# ENDIF()

# IF(Morpheus_ENABLE_HIP)
#   # get HIP version
#   EXECUTE_PROCESS(COMMAND ${CMAKE_CXX_COMPILER} --version
#                   OUTPUT_VARIABLE INTERNAL_COMPILER_VERSION
#                   OUTPUT_STRIP_TRAILING_WHITESPACE)

#   STRING(REPLACE "\n" " - " INTERNAL_COMPILER_VERSION_ONE_LINE ${INTERNAL_COMPILER_VERSION} )

#   STRING(FIND ${INTERNAL_COMPILER_VERSION_ONE_LINE} "HIP version" INTERNAL_COMPILER_VERSION_CONTAINS_HIP)
#   IF(INTERNAL_COMPILER_VERSION_CONTAINS_HIP GREATER -1)
#     SET(MORPHEUS_CXX_COMPILER_ID HIPCC CACHE STRING INTERNAL FORCE)
#   ENDIF()

#   STRING(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+"
#          TEMP_CXX_COMPILER_VERSION ${INTERNAL_COMPILER_VERSION_ONE_LINE})
#   SET(MORPHEUS_CXX_COMPILER_VERSION ${TEMP_CXX_COMPILER_VERSION} CACHE STRING INTERNAL FORCE)
#   MESSAGE(STATUS "Compiler Version: ${MORPHEUS_CXX_COMPILER_VERSION}")
# ENDIF()

IF(MORPHEUS_CXX_COMPILER_ID STREQUAL Clang)
  # The Cray compiler reports as Clang to most versions of CMake
  EXECUTE_PROCESS(COMMAND ${CMAKE_CXX_COMPILER} --version
                  COMMAND grep -c Cray
                  OUTPUT_VARIABLE INTERNAL_HAVE_CRAY_COMPILER
                  OUTPUT_STRIP_TRAILING_WHITESPACE)
  IF (INTERNAL_HAVE_CRAY_COMPILER) #not actually Clang
    SET(MORPHEUS_CLANG_IS_CRAY TRUE)
  ENDIF()
  # The clang based Intel compiler reports as Clang to most versions of CMake
  EXECUTE_PROCESS(COMMAND ${CMAKE_CXX_COMPILER} --version
                  COMMAND grep -c "DPC++\\|icpx"
                  OUTPUT_VARIABLE INTERNAL_HAVE_INTEL_COMPILER
                  OUTPUT_STRIP_TRAILING_WHITESPACE)
  IF (INTERNAL_HAVE_INTEL_COMPILER) #not actually Clang
    SET(MORPHEUS_CLANG_IS_INTEL TRUE)
    SET(MORPHEUS_CXX_COMPILER_ID IntelLLVM CACHE STRING INTERNAL FORCE)
  ENDIF()
ENDIF()

IF(MORPHEUS_CXX_COMPILER_ID STREQUAL Cray OR MORPHEUS_CLANG_IS_CRAY)
  # SET Cray's compiler version.
  EXECUTE_PROCESS(COMMAND ${CMAKE_CXX_COMPILER} --version
                  OUTPUT_VARIABLE INTERNAL_CXX_COMPILER_VERSION
                  OUTPUT_STRIP_TRAILING_WHITESPACE)

  STRING(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+"
         TEMP_CXX_COMPILER_VERSION ${INTERNAL_CXX_COMPILER_VERSION})
  IF (MORPHEUS_CLANG_IS_CRAY)
    SET(MORPHEUS_CLANG_CRAY_COMPILER_VERSION ${TEMP_CXX_COMPILER_VERSION})
  ELSE()
    SET(MORPHEUS_CXX_COMPILER_VERSION ${TEMP_CXX_COMPILER_VERSION} CACHE STRING INTERNAL FORCE)
  ENDIF()
ENDIF()

# Enforce the minimum compilers supported by Morpheus.
SET(MORPHEUS_MESSAGE_TEXT "Compiler not supported by Morpheus.  Required compiler versions:")
SET(MORPHEUS_MESSAGE_TEXT "${MORPHEUS_MESSAGE_TEXT}\n    Clang      4.0.0 or higher")
SET(MORPHEUS_MESSAGE_TEXT "${MORPHEUS_MESSAGE_TEXT}\n    GCC        5.3.0 or higher")
SET(MORPHEUS_MESSAGE_TEXT "${MORPHEUS_MESSAGE_TEXT}\n    Intel     17.0.0 or higher")
# SET(MORPHEUS_MESSAGE_TEXT "${MORPHEUS_MESSAGE_TEXT}\n    NVCC      9.2.88 or higher")
# SET(MORPHEUS_MESSAGE_TEXT "${MORPHEUS_MESSAGE_TEXT}\n    HIPCC      3.8.0 or higher")
# SET(MORPHEUS_MESSAGE_TEXT "${MORPHEUS_MESSAGE_TEXT}\n    PGI         17.4 or higher\n")

IF(MORPHEUS_CXX_COMPILER_ID STREQUAL Clang)
  IF(MORPHEUS_CXX_COMPILER_VERSION VERSION_LESS 4.0.0)
    MESSAGE(FATAL_ERROR "${MORPHEUS_MESSAGE_TEXT}")
  ENDIF()
ELSEIF(MORPHEUS_CXX_COMPILER_ID STREQUAL GNU)
  IF(MORPHEUS_CXX_COMPILER_VERSION VERSION_LESS 7.1.0)
    MESSAGE(FATAL_ERROR "${MORPHEUS_MESSAGE_TEXT}")
  ENDIF()
ELSEIF(MORPHEUS_CXX_COMPILER_ID STREQUAL Intel)
  IF(MORPHEUS_CXX_COMPILER_VERSION VERSION_LESS 17.0.0)
    MESSAGE(FATAL_ERROR "${MORPHEUS_MESSAGE_TEXT}")
  ENDIF()
# ELSEIF(MORPHEUS_CXX_COMPILER_ID STREQUAL NVIDIA)
#   IF(MORPHEUS_CXX_COMPILER_VERSION VERSION_LESS 11.0.00)
#     MESSAGE(FATAL_ERROR "${MORPHEUS_MESSAGE_TEXT}")
#   ENDIF()
#   SET(CMAKE_CXX_EXTENSIONS OFF CACHE BOOL "Morpheus turns off CXX extensions" FORCE)
# ELSEIF(MORPHEUS_CXX_COMPILER_ID STREQUAL HIPCC)
#   IF(MORPHEUS_CXX_COMPILER_VERSION VERSION_LESS 3.8.0)
#     MESSAGE(FATAL_ERROR "${MORPHEUS_MESSAGE_TEXT}")
#   ENDIF()
# ELSEIF(MORPHEUS_CXX_COMPILER_ID STREQUAL PGI)
#   IF(MORPHEUS_CXX_COMPILER_VERSION VERSION_LESS 17.4)
#     MESSAGE(FATAL_ERROR "${MORPHEUS_MESSAGE_TEXT}")
#   ENDIF()
ENDIF()

STRING(REPLACE "." ";" VERSION_LIST ${MORPHEUS_CXX_COMPILER_VERSION})
LIST(GET VERSION_LIST 0 MORPHEUS_COMPILER_VERSION_MAJOR)
LIST(GET VERSION_LIST 1 MORPHEUS_COMPILER_VERSION_MINOR)
LIST(GET VERSION_LIST 2 MORPHEUS_COMPILER_VERSION_PATCH)