FUNCTION(MORPHEUS_ENABLE_OPTION SUFFIX DEFAULT DOCSTRING)
MORPHEUS_OPTION(ENABLE_${SUFFIX} ${DEFAULT} BOOL ${DOCSTRING})
  STRING(TOUPPER ${SUFFIX} UC_NAME)
  IF (MORPHEUS_ENABLE_${UC_NAME})
    LIST(APPEND MORPHEUS_ENABLED_OPTIONS ${UC_NAME})
    #I hate that CMake makes me do this
    SET(MORPHEUS_ENABLED_OPTIONS ${MORPHEUS_ENABLED_OPTIONS} PARENT_SCOPE)
  ENDIF()
  SET(MORPHEUS_ENABLE_${UC_NAME} ${MORPHEUS_ENABLE_${UC_NAME}} PARENT_SCOPE)
ENDFUNCTION()

# Certain defaults will depend on knowing the enabled devices
MORPHEUS_CFG_DEPENDS(OPTIONS DEVICES)
MORPHEUS_CFG_DEPENDS(OPTIONS COMPILER_ID)

# Put a check in just in case people are using this option
MORPHEUS_DEPRECATED_LIST(OPTIONS ENABLE)

# MORPHEUS_ENABLE_OPTION(CUDA_RELOCATABLE_DEVICE_CODE  OFF "Whether to enable relocatable device code (RDC) for CUDA")
# MORPHEUS_ENABLE_OPTION(CUDA_LDG_INTRINSIC   OFF "Whether to use CUDA LDG intrinsics")
# MORPHEUS_ENABLE_OPTION(HIP_RELOCATABLE_DEVICE_CODE  OFF "Whether to enable relocatable device code (RDC) for HIP")
MORPHEUS_ENABLE_OPTION(TESTS         OFF  "Whether to build the unit tests")
MORPHEUS_ENABLE_OPTION(EXAMPLES      OFF  "Whether to build the examples")
STRING(TOUPPER "${CMAKE_BUILD_TYPE}" UPPERCASE_CMAKE_BUILD_TYPE)

UNSET(_UPPERCASE_CMAKE_BUILD_TYPE)
MORPHEUS_ENABLE_OPTION(COMPILER_WARNINGS    OFF "Whether to print all compiler warnings")
MORPHEUS_ENABLE_OPTION(AGGRESSIVE_VECTORIZATION OFF "Whether to aggressively vectorize loops")

# IF (MORPHEUS_ENABLE_CUDA)
#   SET(MORPHEUS_COMPILER_CUDA_VERSION "${MORPHEUS_COMPILER_VERSION_MAJOR}${MORPHEUS_COMPILER_VERSION_MINOR}")
# ENDIF()

FUNCTION(check_device_specific_options)
  CMAKE_PARSE_ARGUMENTS(SOME "" "DEVICE" "OPTIONS" ${ARGN})
  IF(NOT MORPHEUS_ENABLE_${SOME_DEVICE})
    FOREACH(OPTION ${SOME_OPTIONS})
      IF(NOT DEFINED CACHE{Morpheus_ENABLE_${OPTION}} OR NOT DEFINED CACHE{Morpheus_ENABLE_${SOME_DEVICE}})
        MESSAGE(FATAL_ERROR "Internal logic error: option '${OPTION}' or device '${SOME_DEVICE}' not recognized.")
      ENDIF()
      IF(MORPHEUS_ENABLE_${OPTION})
        MESSAGE(WARNING "Morpheus_ENABLE_${OPTION} is ON but ${SOME_DEVICE} backend is not enabled. Option will be ignored.")
        UNSET(MORPHEUS_ENABLE_${OPTION} PARENT_SCOPE)
      ENDIF()
    ENDFOREACH()
  ENDIF()
ENDFUNCTION()

# CHECK_DEVICE_SPECIFIC_OPTIONS(DEVICE CUDA OPTIONS CUDA_RELOCATABLE_DEVICE_CODE CUDA_LDG_INTRINSIC)
# CHECK_DEVICE_SPECIFIC_OPTIONS(DEVICE HIP OPTIONS HIP_RELOCATABLE_DEVICE_CODE)

# Needed due to change from deprecated name to new header define name
IF (MORPHEUS_ENABLE_AGGRESSIVE_VECTORIZATION)
  SET(MORPHEUS_OPT_RANGE_AGGRESSIVE_VECTORIZATION ON)
ENDIF()

# # This is known to occur with Clang 9. We would need to use nvcc as the linker
# # http://lists.llvm.org/pipermail/cfe-dev/2018-June/058296.html
# # TODO: Through great effort we can use a different linker by hacking
# # CMAKE_CXX_LINK_EXECUTABLE in a future release
# IF (MORPHEUS_ENABLE_CUDA_RELOCATABLE_DEVICE_CODE AND MORPHEUS_CXX_COMPILER_ID STREQUAL Clang)
#   MESSAGE(FATAL_ERROR "Relocatable device code is currently not supported with Clang - must use nvcc_wrapper or turn off RDC")
# ENDIF()

# IF (MORPHEUS_ENABLE_CUDA_RELOCATABLE_DEVICE_CODE AND BUILD_SHARED_LIBS)
#   MESSAGE(FATAL_ERROR "Relocatable device code requires static libraries.")
# ENDIF()